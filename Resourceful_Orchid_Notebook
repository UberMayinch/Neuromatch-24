{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/UberMayinch/Neuromatch-24/blob/main/Resourceful_Orchid_Notebook\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Installation"
      ],
      "metadata": {
        "id": "liIdnStTx4_l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install --quiet ONE-api\n",
        "!pip install --quiet ibllib"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zoAjuFVqyL_K",
        "outputId": "2ba93177-574c-40e1-eaca-2d9a75b1907c"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m115.2/115.2 kB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m57.6/57.6 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m139.2/139.2 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.4/12.4 MB\u001b[0m \u001b[31m12.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.7/62.7 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m82.7/82.7 kB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m180.6/180.6 kB\u001b[0m \u001b[31m6.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.7/8.7 MB\u001b[0m \u001b[31m43.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m70.2/70.2 kB\u001b[0m \u001b[31m5.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m174.3/174.3 kB\u001b[0m \u001b[31m11.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m80.4/80.4 kB\u001b[0m \u001b[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m40.2/40.2 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m350.7/350.7 kB\u001b[0m \u001b[31m17.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m39.5/39.5 MB\u001b[0m \u001b[31m9.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.2/8.2 MB\u001b[0m \u001b[31m39.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m237.3/237.3 kB\u001b[0m \u001b[31m14.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.5/60.5 MB\u001b[0m \u001b[31m7.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m270.5/270.5 kB\u001b[0m \u001b[31m6.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Building wheel for nptdms (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2RgSDLtwxw9m",
        "outputId": "69d24fde-2731-4862-a497-7c10c7182e59"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Connected to https://openalyx.internationalbrainlab.org as user \"intbrainlab\"\n",
            "Downloading: /root/Downloads/ONE/openalyx.internationalbrainlab.org/tmp5wrpwuoc/cache.zip Bytes: 6254178\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 5.964448928833008/5.964448928833008 [00:00<00:00, 11.89it/s]\n"
          ]
        }
      ],
      "source": [
        "from one.api import ONE\n",
        "ONE.setup(base_url='https://openalyx.internationalbrainlab.org', silent=True)\n",
        "one = ONE(password='international')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Finding subjects within training data"
      ],
      "metadata": {
        "id": "L6bzJGJDx8Bc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Find all aggregate training datasets from paper Brujins et al\n",
        "datasets = one.alyx.rest('datasets', 'list', tag='2023_Q4_Bruijns_et_al')\n",
        "\n",
        "# Find the subject name from the info stored in the relative path\n",
        "subjects = np.unique([d['file_records'][0]['relative_path'].split('/')[-2] for d in datasets])"
      ],
      "metadata": {
        "id": "qoHOQxh1x0Cw"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Loading trial data for a single subject"
      ],
      "metadata": {
        "id": "XVIcLHlNyDFx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Load in the subjectTrials table for the first subject\n",
        "subject = subjects[0]\n",
        "subject_trials = one.load_aggregate('subjects', subject, '_ibl_subjectTrials.table')\n",
        "\n",
        "\n",
        "# Add in lab, task_protocol, subject name information from the ONE cache\n",
        "if 'task_protocol' in subject_trials:\n",
        "    subject_trials = subject_trials.drop('task_protocol', axis=1)\n",
        "subject_trials = subject_trials.set_index('session').join(one._cache.sessions.drop('date', axis=1))"
      ],
      "metadata": {
        "id": "CqYD2IgCyGdu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the trials data for a single session\n",
        "# Find a session run under biasedChoiceWorld\n",
        "sess = subject_trials[subject_trials['task_protocol'].str.contains('biasedChoiceWorld')].index.unique()[0]\n",
        "trials = subject_trials[subject_trials.index == sess]\n",
        "print(trials)"
      ],
      "metadata": {
        "id": "X2i24BcVyIuV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Modules"
      ],
      "metadata": {
        "id": "f4P8TOyByft0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import sklearn\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import Lasso\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "U49Efy0UyX1K"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "A trial run"
      ],
      "metadata": {
        "id": "AkzouO0Nyhnb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# @title Trial run\n",
        "# Select the session with 'biasedChoiceWorld' protocol\n",
        "sess = subject_trials[subject_trials['task_protocol'].str.contains('biasedChoiceWorld')].index.unique()[0]\n",
        "trials = subject_trials[subject_trials.index == sess]\n",
        "\n",
        "\n",
        "# Combine contrastRight and contrastLeft into a single column, with contrastRight having a minus sign and contrastLeft positive. Having the same dimension as the choice\n",
        "trials['signed_contrast'] = np.where(trials['contrastRight'].notnull(), -trials['contrastRight'], trials['contrastLeft'])\n",
        "\n",
        "\n",
        "# Create lagged features for the 'choice' column\n",
        "for lag in range(1, 6):\n",
        "  trials[f'choice_lag_{lag}'] = trials['choice'].shift(lag)\n",
        "\n",
        "# Drop rows with NaN values generated due to the shift operation, also drop the same row in choice and signed_contrast where lag_columns shows NaN\n",
        "lag_columns = [f'choice_lag_{lag}' for lag in range(1, 6)]\n",
        "trials = trials.dropna(subset=lag_columns)\n",
        "\n",
        "# create the vector y, which is trials['choice']\n",
        "y = trials['choice']\n",
        "\n",
        "# create the matrix X, which is jointed by choice_lag_1 to 5 and the signed_contrast, so it is 1147 x 6\n",
        "X = trials[lag_columns]\n",
        "\n",
        "\n",
        "# Standardize the data\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# Perform PCA\n",
        "pca = PCA(n_components=1)  # We only need the first principal component\n",
        "X_pca = pca.fit_transform(X_scaled)\n",
        "\n",
        "  # Get the first principal component\n",
        "v = pca.components_[0]\n",
        "\n",
        "  # Matrix multiplication\n",
        "Y = np.dot(X_scaled, v)\n",
        "\n",
        "  # Reshape Y to ensure it has the correct dimensions [n x 1]\n",
        "Y = Y.reshape(-1, 1)\n",
        "\n",
        "  # Split the data\n",
        "X_train, X_test, y_train, y_test = train_test_split(Y, y, test_size=0.2, random_state=42)\n",
        "\n",
        "  # Print the values of the principal components\n",
        "print(\"Principal component:\", v)\n",
        "\n",
        "  # Print the explained variance of v\n",
        "print(\"Explained variance ratio:\", pca.explained_variance_ratio_)\n",
        "\n",
        "  # Train Lasso regression model\n",
        "lasso = Lasso(alpha=0.1)  # You can adjust the alpha parameter for regularization strength\n",
        "lasso.fit(X_train, y_train)\n",
        "\n",
        "  # Predict and evaluate\n",
        "y_pred = lasso.predict(X_test)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "print(f'Mean Squared Error: {mse:.2f}')\n",
        "\n",
        "  # Inspect coefficients to ensure sparsity\n",
        "print(\"Lasso coefficients:\", lasso.coef_)"
      ],
      "metadata": {
        "id": "m4Hnzo2Kyjkg",
        "cellView": "form"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Defining functions"
      ],
      "metadata": {
        "id": "pukdeLePyrPm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_subject(k: int):\n",
        "  \"\"\"\n",
        "  Get the kth subject's trial data\n",
        "  Output: large high dim array\n",
        "  \"\"\"\n",
        "  # Load in the subjectTrials table for the first subject\n",
        "  subject = subjects[k]\n",
        "  subject_trials = one.load_aggregate('subjects', subject, '_ibl_subjectTrials.table')\n",
        "\n",
        "  # Add in lab, task_protocol, subject name information from the ONE cache\n",
        "  if 'task_protocol' in subject_trials:\n",
        "      subject_trials = subject_trials.drop('task_protocol', axis=1)\n",
        "  subject_trials = subject_trials.set_index('session').join(one._cache.sessions.drop('date', axis=1))\n",
        "\n",
        "  # Get the trials data for a single session\n",
        "  # Find a session run under biasedChoiceWorld\n",
        "  sess = subject_trials[subject_trials['task_protocol'].str.contains('biasedChoiceWorld', na=False)].dropna(subset=['task_protocol']).index.unique()[k]\n",
        "  trials = subject_trials[subject_trials.index == sess]\n",
        "  return trials"
      ],
      "metadata": {
        "id": "0ZLhUtCRWIlI"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_choice(trials):\n",
        "  \"\"\"\n",
        "  Get the choice vector, y from trials\n",
        "  \"\"\"\n",
        "  y = trials['choice']\n",
        "  y = y[20:]\n",
        "\n",
        "  return y"
      ],
      "metadata": {
        "id": "wKc_G7vvp-Zl"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def lagL(l, X):\n",
        "  \"\"\"Create the choice_lag with the fix number of l\n",
        "      l - the number of lags\n",
        "      X - the trials data\n",
        "      X_lagged - the lagged choice, returned array\n",
        "  \"\"\"\n",
        "  for lag in range(1, l + 1):\n",
        "    X[f'choice_lag_{lag}'] = X['choice'].shift(lag)\n",
        "  X_lag = X.dropna(subset=[f'choice_lag_{lag}' for lag in range(1, l + 1)])\n",
        "  # remove all columnns except choice_lag_{lag} (use regular expression)\n",
        "  X_lag = X_lag.drop(X_lag.columns.difference([f'choice_lag_{lag}' for lag in range(1, l + 1)]), axis=1)\n",
        "  return X_lag"
      ],
      "metadata": {
        "id": "HlR2OhbWysqY"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def make_signed_contrast(trials, X):\n",
        "  \"\"\"\n",
        "  Add the signed_contrast column to the leftmost of the matrix X\n",
        "  \"\"\"\n",
        "  trials['signed_contrast'] = np.where(trials['contrastRight'].notnull(), -trials['contrastRight'], trials['contrastLeft'])\n",
        "\n",
        "  sc = trials['signed_contrast']\n",
        "\n",
        "  if trials['signed_contrast'].shape[0] != X.shape[0]:\n",
        "    sc = sc[(sc.shape[0] - X.shape[0]):]\n",
        "  X = pd.concat([sc, X], axis=1)\n",
        "  return X"
      ],
      "metadata": {
        "id": "NOYYuxm3qdkL"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def perf_PCA(X, y):\n",
        "  \"\"\"Compute the first two principal components of X and return them as a tuple\n",
        "  If X has the dimension nxm, then each PC has the dimension of nx1, and the\n",
        "  joint PCs is a matrix of nx2.\n",
        "    X - a n x m matrix\n",
        "    y - a n x 1 vector, consisting of the 'choice' data\n",
        "    v1, v2 - the two eigenvectors with dimension m x 1\n",
        "    Equation: y = X v\n",
        "    Output:\n",
        "    v1 (array)\n",
        "    v2 (array)\n",
        "    explained variance of v1 (float) and v2 (float)\n",
        "    feature vectors, x1, x2 obtained from dotting v1 and v2 with the X matrix (n x 1)\n",
        "  \"\"\"\n",
        "  # Get the length of sample, n is the original dimension, y\n",
        "  n = y.shape[0]\n",
        "  j = X.shape[0]\n",
        "\n",
        "\n",
        "  # Reshape matrix X to start from the j-nth row\n",
        "  X = X[j-n:]\n",
        "\n",
        "  # Standardize the data\n",
        "  scaler = StandardScaler()\n",
        "  X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "  # Perform PCA\n",
        "  pca = sklearn.decomposition.PCA()  # We need the first two principal components\n",
        "  X_pca = pca.fit_transform(X_scaled)\n",
        "\n",
        "  # Get the first TWO PCs\n",
        "  v1 = pca.components_[0]\n",
        "  v2 = pca.components_[1]\n",
        "\n",
        "  # Calculate the explained variance of v1 and v2\n",
        "  EV1 = pca.explained_variance_ratio_[0]\n",
        "  EV2 = pca.explained_variance_ratio_[1]\n",
        "\n",
        "  # Dot the X matrix with v1 and v2 respectively to get x1 and x2\n",
        "  x1 = np.dot(X_scaled, v1)\n",
        "  x2 = np.dot(X_scaled, v2)\n",
        "\n",
        "  EV_sum = EV1 + EV2\n",
        "\n",
        "  return x1, x2, EV_sum"
      ],
      "metadata": {
        "id": "wNpOUBrayuV4"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def join_PCs(*args):\n",
        "  \"\"\"\n",
        "  Join m number of feature vectors, x1, x2, ... (n x 1) into a big matrix (n x m)\n",
        "  Output: return a matrix V of dimension n x m\n",
        "  \"\"\"\n",
        "  V = np.column_stack(args)\n",
        "\n",
        "  return V"
      ],
      "metadata": {
        "id": "NFUfjl_PbBf3"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def lasso(V, y, alpha = 0.1):\n",
        "  \"\"\"Perform the lasso regularisation to ensure the parameter's sparsity. The\n",
        "  defualt value of alpha is 0.1.\n",
        "  Input: V - the joined matrix of the different eigenvectors components\n",
        "        y - the n x 1 vector, consisting of the choice data\n",
        "        alpha - the constant constraining the lasso's tightness\n",
        "  \"\"\"\n",
        "  # Compare the number of rows between V and y, if they are different, remove the rows of y from top to bottom to fit V\n",
        "  if V.shape[0] > y.shape[0]:\n",
        "    y = y[V.shape[0] - y.shape[0]:]\n",
        "    # Split the data\n",
        "  X_train, X_test, y_train, y_test = train_test_split(V, y, test_size=0.2, random_state=42)\n",
        "\n",
        "  # Set the lasso\n",
        "  lasso = Lasso(alpha)\n",
        "  lasso.fit(V, y)\n",
        "\n",
        "  # Predict and evaluate\n",
        "  y_pred = lasso.predict(X_test)\n",
        "  mse = mean_squared_error(y_test, y_pred)\n",
        "\n",
        "  return mse, lasso.coef_"
      ],
      "metadata": {
        "id": "D_497KR2yv8S"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def heatmap(V):\n",
        "  \"\"\"\n",
        "  Given a n x m matrix, X\n",
        "  Plot the heatmap using the matplotlib library\n",
        "  \"\"\"\n",
        "  # Create a heatmap\n",
        "  plt.figure(figsize=(10, 8))\n",
        "  sns.heatmap(V, cmap='coolwarm', annot=False, fmt='.2f', linewidths=0.5)\n",
        "  plt.title('Heatmap of the eigenvector matrix')\n",
        "  plt.show()"
      ],
      "metadata": {
        "id": "wtfXzi6NXJYZ"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We randomly sample 20 mice.\n",
        "\n",
        "For each mice, we compute the choice lag, 1 (plus the signed_contrast), 1-2, 1-3, ... , 1-10, to get 10 different feature matrix, X1, X2,..., X10.\n",
        "\n",
        "Out of each feature matrix, we compute the first two principal components, v1 and v2.\n",
        "\n",
        "From the principal components we get, we take the dot product of each them with their respective feature matrix to get 20 different feature vectors of the dimension [n-sample].\n",
        "\n",
        "We join the 20 vectors in the ascending sequence (1 to 10 lags, 1st and 2nd components). Then, we fed this [n-sample, 20] matrix into the lasso regularisation, with the y as the choice vector of the dimension [n-sample].\n",
        "\n",
        "We select 5 different alpha for the L1 regularisation using the logspace. (np.logspace(-4, 0, 5))"
      ],
      "metadata": {
        "id": "sUKZ1qTPitHD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Running the experiment: multiple lags and perform lasso with different alpha values for a single subject.\n",
        "In order for our method to work, each X that is being fed into the PCA must have the same number of features. I.e., the number of lags in the X matrix must be the same."
      ],
      "metadata": {
        "id": "vPaLSNk3y0l-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the trial into the variable trial using get_subject\n",
        "trial = get_subject(0)\n",
        "\n",
        "# Prepare the y vector, which is what the PCA and lasso will be fitting to with the get_choice\n",
        "y = get_choice(trial)\n",
        "\n",
        "X_pca = np.array([])\n",
        "\n",
        "explained_variance = []\n",
        "\n",
        "# A big for loop, running from 1 to 10, each iteration will create a X matrix based on the lag function\n",
        "# Except for the first iteration, which will also be concatenated by the column of sign_contrast using the make_signed_contrast()\n",
        "# Store all the matrix into a rank 3 tensor using the np.array structure\n",
        "for lag in range(1, 11):\n",
        "  X = lagL(lag, trial)\n",
        "  if lag == 1:\n",
        "    X_signed = make_signed_contrast(trial, X)\n",
        "    x1, x2, EV_sum = perf_PCA(X_signed, y)\n",
        "    X_pca = np.append(X_pca, x1)\n",
        "    X_pca = np.append(X_pca, x2)\n",
        "    # sum the explained variance ratio of x1 and x2 together and append to the list\n",
        "    explained_variance.append(EV_sum)\n",
        "  else:\n",
        "    x1, x2, EV_sum = perf_PCA(X, y)\n",
        "    X_pca = np.append(X_pca, x1)\n",
        "    X_pca = np.append(X_pca, x2)\n",
        "    # sum the explained variance ratio of x1 and x2 together and append to the list\n",
        "    explained_variance.append(EV_sum)\n",
        "\n",
        "# reshape X_pca into 1132 x 20 matrix, make sure the matrix is filled column by column\n",
        "X_pca = X_pca.reshape(-1, 20)\n",
        "print(X_pca.shape)\n",
        "print(X_pca)\n",
        "\n",
        "print(f'The explained variance of the first two PCs for the different lags {explained_variance}')\n",
        "plt.bar(range(10), EV, width = 0.4)\n",
        "plt.xlabel('Lag 1-10')\n",
        "plt.ylabel('Explained variance')\n",
        "plt.title('Explained variance of the combined two PCs for the different lags')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "sbUaEhJryz8I",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 766
        },
        "outputId": "40d206e4-12ba-446b-f2fd-914e10e10559"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1132, 20)\n",
            "[[-0.50927863 -0.7804643  -0.59967385 ... -0.72214373 -0.69006907\n",
            "  -0.87085952]\n",
            " [-0.69006907 -0.32848819  0.63378458 ... -2.13639261 -2.13639261\n",
            "   0.75625447]\n",
            " [ 0.63378458  0.81457503  0.75625447 ... -1.05164996 -0.87085952\n",
            "  -0.59967385]\n",
            " ...\n",
            " [ 1.24465658  1.39725094  2.20227945 ...  0.31129756  0.62521139\n",
            "   0.47695151]\n",
            " [ 1.44616837  0.97747901  0.2910831  ... -1.42166742 -0.96455593\n",
            "  -0.21369931]\n",
            " [-0.99966555 -1.48835807 -1.20546333 ...  1.04366096  0.39568089\n",
            "   0.8216253 ]]\n",
            "The explained variance of the first two PCs for the different lags [1.0, 1.0, 0.7644169736321824, 0.647131216526582, 0.5748150690243321, 0.5282881236002459, 0.4912414269496204, 0.4643745043568578, 0.4444249939280488, 0.4286022554749441]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Running the experiment: load multiple mice subjects with multiple lags and perform lasso with the same alpha\n",
        "\n"
      ],
      "metadata": {
        "id": "2q6MtM6wy7wK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Now, we have the X_pca matrix, we want to perform the lasso regularisation\n",
        "# of this X_pca against the vector y, which has the same dimension for a range of\n",
        "# alpha using the loglinespace\n",
        "\n",
        "alpha_range = np.logspace(-4, 0, 5)\n",
        "\n",
        "\n",
        "# Create a 20 x 5 matrix, store the values of lasso coefficients in the ascending order into the matrix\n",
        "coef_matrix = np.zeros((20, 5))\n",
        "\n",
        "for alpha in alpha_range:\n",
        "  mse, coef = lasso(X_pca, y, alpha)\n",
        "  coef_matrix[:, np.where(alpha_range == alpha)[0][0]] = coef\n",
        "\n",
        "# Take the absolute magnitude of the coefficient matrix\n",
        "coef_matrix = np.abs(coef_matrix)\n",
        "\n",
        "\n",
        "print(coef_matrix)\n",
        "# create a heatmap based on the coef_matrix\n",
        "sns.heatmap(coef_matrix, cmap='Oranges', annot=False, fmt='.2f', linewidths=0.5)\n",
        "# label the x axis with 5 alpha values, label stays in the middle\n",
        "plt.xticks(np.arange(5), alpha_range, rotation=45)\n",
        "plt.title('Heatmap of the lasso coefficients with different alpha values')\n",
        "plt.ylabel('PC1 and PC2 of the Lag_1 to Lag_10')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "6vrsmJptzOEO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 847
        },
        "outputId": "5873baf9-5671-4e0e-95fb-3d3c664a4392"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.01496308 0.01377132 0.00507759 0.         0.        ]\n",
            " [0.04632302 0.04543449 0.03834572 0.         0.        ]\n",
            " [0.01411971 0.01186948 0.         0.         0.        ]\n",
            " [0.0218771  0.01970132 0.00141146 0.         0.        ]\n",
            " [0.03986762 0.04003486 0.03391021 0.         0.        ]\n",
            " [0.01477855 0.01302323 0.         0.         0.        ]\n",
            " [0.00207662 0.00124049 0.         0.         0.        ]\n",
            " [0.05087682 0.05042118 0.04242745 0.         0.        ]\n",
            " [0.01777863 0.01812015 0.0190702  0.         0.        ]\n",
            " [0.0231018  0.02058295 0.         0.         0.        ]\n",
            " [0.02140305 0.01872445 0.         0.         0.        ]\n",
            " [0.04653423 0.04435089 0.0233773  0.         0.        ]\n",
            " [0.05205888 0.04907734 0.03135788 0.         0.        ]\n",
            " [0.04119238 0.03816244 0.01863834 0.         0.        ]\n",
            " [0.00295665 0.         0.         0.         0.        ]\n",
            " [0.02448417 0.02147544 0.         0.         0.        ]\n",
            " [0.04130379 0.0389734  0.02772109 0.         0.        ]\n",
            " [0.02521473 0.02234245 0.         0.         0.        ]\n",
            " [0.01189245 0.01086938 0.         0.         0.        ]\n",
            " [0.04316718 0.04150502 0.02624724 0.         0.        ]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# This is just a package of all previous procedures up till obtaining the lasso coef_\n",
        "def get_lasso_coef(k):\n",
        "  # Load the trial into the variable trial using get_subject\n",
        "  trial = get_subject(k)\n",
        "\n",
        "  # Prepare the y vector, which is what the PCA and lasso will be fitting to with the get_choice\n",
        "  y = get_choice(trial)\n",
        "\n",
        "  X_pca = np.array([])\n",
        "\n",
        "  # Create an empty list to store the explained variance\n",
        "  explained_variance = []\n",
        "\n",
        "  # A big for loop, running from 1 to 10, each iteration will create a X matrix based on the lag function\n",
        "  # Except for the first iteration, which will also be concatenated by the column of sign_contrast using the make_signed_contrast()\n",
        "  # Store all the matrix into a rank 3 tensor using the np.array structure\n",
        "  for lag in range(1, 11):\n",
        "    X = lagL(lag, trial)\n",
        "    if lag == 1:\n",
        "      X_signed = make_signed_contrast(trial, X)\n",
        "      x1, x2, EV_sum = perf_PCA(X_signed, y)\n",
        "      X_pca = np.append(X_pca, x1)\n",
        "      X_pca = np.append(X_pca, x2)\n",
        "      # sum the explained variance ratio of x1 and x2 together and append to the list\n",
        "      explained_variance.append(EV_sum)\n",
        "\n",
        "    else:\n",
        "      x1, x2, EV_sum = perf_PCA(X, y)\n",
        "      X_pca = np.append(X_pca, x1)\n",
        "      X_pca = np.append(X_pca, x2)\n",
        "      # sum the explained variance ratio of x1 and x2 together and append to the list\n",
        "      explained_variance.append(EV_sum)\n",
        "\n",
        "  # reshape X_pca into n (undetermined) x 20 matrix\n",
        "  X_pca = X_pca.reshape(-1, 20)\n",
        "\n",
        "  mse, coef = lasso(X_pca, y, alpha = 0.021)\n",
        "\n",
        "  return coef, explained_variance"
      ],
      "metadata": {
        "id": "jwvaCuQwB_1b"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now, do the same procedure of PCA -> lasso on different subjects"
      ],
      "metadata": {
        "id": "zCMUdwzEC8k6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a 20 x 7 empty matrix to store the lasso_coef values\n",
        "lasso_coef_matrix = np.zeros((20,7))\n",
        "\n",
        "# Write a for loop traverse the list, and each time call the get_lasso_coef()\n",
        "for i in range(7):\n",
        "  coef, EV = get_lasso_coef(i)\n",
        "  lasso_coef_matrix[:, i] = coef\n",
        "\n",
        "# Take the absolute magnitude of the coefficient matrix\n",
        "lasso_coef_matrix = np.abs(lasso_coef_matrix)\n",
        "\n",
        "print(f'The explained variance of the first two PCs for the different lags {EV}')\n",
        "\n",
        "# Create a heatmap\n",
        "sns.heatmap(lasso_coef_matrix, cmap='Oranges', annot=False, fmt='.2f', linewidths=0.5)\n",
        "# Label the x axis with label Subject[x] for x in range(7)\n",
        "plt.xticks(np.arange(7), ['Subject ' + str(i) for i in range(7)], rotation=45)\n",
        "plt.title('The lassso coefficients (α=0.021) for different subjects')\n",
        "# Give the y axis the title 'the first two principal components between lag 1 to 10'\n",
        "plt.ylabel('PC1 and PC2 of the Lag_1 to Lag_10')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 532
        },
        "id": "Tx_h6jbqC6WO",
        "outputId": "d9470e13-1d88-4449-f084-783eee8dab17"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The explained variance of the first two PCs for the different lags [1.0, 1.0, 0.7880354195877874, 0.6858905619501133, 0.6242409324828463, 0.5795748968537769, 0.5461925104282316, 0.5186802040246137, 0.49648873179903813, 0.47850652732692206]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot a bar graph for the EV list using matplotlib\n",
        "plt.bar(range(10), EV, width = 0.4)\n",
        "plt.xlabel('Lag 1-10')\n",
        "plt.ylabel('Explained variance')\n",
        "plt.title('Explained variance of the combined 1st two PCs for the different lags')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "AYcopgcIQKgH",
        "outputId": "a5a5ae9d-4646-4854-d738-61c14bdd2711"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Try the same thing without using the signed_contrast at all, adjusting the lag\n",
        "# from lag_2 to lag_11 to ensure the PCs are at least equal to the dimension of the sample\n",
        "def get_lasso_coef_1(k):\n",
        "  # Load the trial into the variable trial using get_subject\n",
        "  trial = get_subject(k)\n",
        "\n",
        "  # Prepare the y vector, which is what the PCA and lasso will be fitting to with the get_choice\n",
        "  y = get_choice(trial)\n",
        "\n",
        "  X_pca = np.array([])\n",
        "\n",
        "  # A big for loop, running from 1 to 10, each iteration will create a X matrix based on the lag function\n",
        "  # Except for the first iteration, which will also be concatenated by the column of sign_contrast using the make_signed_contrast()\n",
        "  # Store all the matrix into a rank 3 tensor using the np.array structure\n",
        "  for lag in range(2, 12):\n",
        "    X = lagL(lag, trial)\n",
        "    x1, x2 = perf_PCA(X, y)\n",
        "    X_pca = np.append(X_pca, x1)\n",
        "    X_pca = np.append(X_pca, x2)\n",
        "\n",
        "  # reshape X_pca into n (undetermined) x 20 matrix\n",
        "  X_pca = X_pca.reshape(-1, 20)\n",
        "\n",
        "  mse, coef = lasso(X_pca, y, alpha = 0.001)\n",
        "\n",
        "  return coef"
      ],
      "metadata": {
        "id": "m4cnnTsYLS5Q"
      },
      "execution_count": 122,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a 20 x 7 empty matrix to store the lasso_coef values\n",
        "lasso_coef_matrix = np.zeros((20,7))\n",
        "\n",
        "# Write a for loop traverse the list, and each time call the get_lasso_coef()\n",
        "for i in range(7):\n",
        "  coef = get_lasso_coef_1(i)\n",
        "  lasso_coef_matrix[:, i] = coef\n",
        "\n",
        "# Create a heatmap\n",
        "sns.heatmap(lasso_coef_matrix, cmap='coolwarm', annot=False, fmt='.2f', linewidths=0.5)\n",
        "# Label the x axis with label Subject[x] for x in range(7)\n",
        "plt.xticks(np.arange(7), ['Subject ' + str(i) for i in range(7)], rotation=45)\n",
        "plt.title('Heatmap of the lasso coefficients with different subjects')\n",
        "# Give the y axis the title 'the first two principal components between lag 1 to 10'\n",
        "plt.ylabel('PC1 and PC2 of the Lag_2 to Lag_11')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 494
        },
        "id": "rxYyJXVXLxBc",
        "outputId": "447be579-17b6-4a5d-bbd5-226a7c50bd40"
      },
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Try the same thing without using the signed_contrast at all, adjusting the lag\n",
        "# from lag_2 to lag_11 to ensure the PCs are at least equal to the dimension of the sample\n",
        "def get_lasso_coef_2(k):\n",
        "  # Load the trial into the variable trial using get_subject\n",
        "  trial = get_subject(k)\n",
        "\n",
        "  # Prepare the y vector, which is what the PCA and lasso will be fitting to with the get_choice\n",
        "  y = get_choice(trial)\n",
        "\n",
        "  X_pca = np.array([])\n",
        "\n",
        "  # A big for loop, running from 1 to 10, each iteration will create a X matrix based on the lag function\n",
        "  # Except for the first iteration, which will also be concatenated by the column of sign_contrast using the make_signed_contrast()\n",
        "  # Store all the matrix into a rank 3 tensor using the np.array structure\n",
        "  for lag in range(2, 12):\n",
        "    X = lagL(lag, trial)\n",
        "    x1, x2 = perf_PCA(X, y)\n",
        "    X_pca = np.append(X_pca, x1)\n",
        "\n",
        "  # reshape X_pca into n (undetermined) x 20 matrix\n",
        "  X_pca = X_pca.reshape(-1, 10)\n",
        "\n",
        "  mse, coef = lasso(X_pca, y, alpha = 0.001)\n",
        "\n",
        "  return coef"
      ],
      "metadata": {
        "id": "C-nS5jJnMYq8"
      },
      "execution_count": 125,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a 10 x 7 empty matrix to store the lasso_coef values\n",
        "lasso_coef_matrix = np.zeros((10,7))\n",
        "\n",
        "# Write a for loop traverse the list, and each time call the get_lasso_coef()\n",
        "for i in range(7):\n",
        "  coef = get_lasso_coef_2(i)\n",
        "  lasso_coef_matrix[:, i] = coef\n",
        "\n",
        "# Create a heatmap\n",
        "sns.heatmap(lasso_coef_matrix, cmap='coolwarm', annot=False, fmt='.2f', linewidths=0.5)\n",
        "# Label the x axis with label Subject[x] for x in range(7)\n",
        "plt.xticks(np.arange(7), ['Subject ' + str(i) for i in range(7)], rotation=45)\n",
        "plt.title('Heatmap of the lasso coefficients with different subjects')\n",
        "# Give the y axis the title 'the first two principal components between lag 1 to 10'\n",
        "plt.ylabel('PC1 of the Lag_2 to Lag_11')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 494
        },
        "id": "WFFSjcz4Mj0t",
        "outputId": "74483622-8c73-43a7-f5ad-b5f463d30236"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}